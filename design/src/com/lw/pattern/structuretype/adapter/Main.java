package com.lw.pattern.structuretype.adapter;
/**
 * @author liwen
 * @date:2017年12月5日 上午10:25:05
 * @Function: 适配器模式:
 * 					使用场景:　当我们要访问的接口A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，我们又不能改变访问接口A，在这种情况下,
 * 							我们可以定义一个适配器p来进行中转，这个适配器p要实现我们访问的接口A，这样我们就能继续访问当前接口A中的方法（虽然它目前不是我们的菜）,
 * 							然后再继承接口B的实现类BB，这样我们可以在适配器P中访问接口B的方法了，这时我们在适配器P中的接口A方法中直接引用BB中的合适方法,
 * 							这样就完成了一个简单的类适配器.
 * 					类型:类适配器和对象适配器.
 * 					对象适配器:比较简单,当我们一个接口的方法有太多,而如果我们实现类去实现的话可能需要实现太多的方法,而实际上只用得着1、2个.这是我们可以创建一个适配器类,
 * 							去实现接口,给每个接口一个空实现.
 * 					下面的是类适配器,demo也是类适配器
 * 					解决的问题:当已继承一个类,而这个类又没有我们所必须的方法methodA()、父类又不可修改时,可以创建一个Adapter,让其去extends父类,implements
 * 							methodA()所在的接口.之后我们就只需要new 这个适配器类即可
 * @version 1.0
 */
public class Main {

	public static void main(String[] args) {
		Ps2 p = new Adapter();
		p.isPs2();
	}
}
